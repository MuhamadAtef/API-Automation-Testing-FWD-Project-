
website http://fakerestapi.azurewebsites.net/index.html

 API: GET /api/v1/Authors
 
 [
 Test Case 1: response should be 200 OK
 {
 Expected Result: 200 OK
 Actual Result: 200 OK
 Status: Pass
 
 test
 pm.test("check response status is 200 OK", function () {
    pm.expect(pm.response.code).to.eql(200)
    pm.expect(pm.response.status).to.equal("OK")
});
 
,

Test Case 2: Objects inside response contain, id, idBook, firstName, lastName.
{
 Expected Result: 'id','idBook','firstName','lastName'
 Actual Result: 'id','idBook','firstName','lastName'
 Status: Pass


{
    "id": 1,
    "idBook": 1,
    "firstName": "First Name 1",
    "lastName": "Last Name 1"
}

pm.test("Objects inside response contain", function () {
    pm.expect(pm.response.json()).to.have.keys('id', 'idBook', 'firstName', 'lastName');
});}
]

 API: POST /api/v1/Authors
 
 [
 Test Case 1: Register a new valid Author successfully and response code "201 Created".
 
 {{{
	test	 
pm.test("Successful POST request", function () {
    pm.expect(pm.response.code).to.be.oneOf([200, 201]);
 });
 
pm.test("Status code name is 'OK' ", function () {
    pm.expect(pm.response.status).eql("OK");
});
pm.test("Status code name is 'created' ", function () {
    pm.expect(pm.response.status).to.be.oneOf(["Created","OK"]);
 });

,
 Test Case 2: firstname & lastname should be mandatory
 {
pm.test("if first or second is missed status code will be 400", function () {
    pm.response.to.have.status(400);
});
]


GET /api/v1/Authors/authors/books/{idBook}

[
Test Case 1: Searching with valid idBook should return relative data in response body.

{
	
	pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

,
Test Case 2: check  valid idBook should return relative data in response body.

{
	pm.test("check return id = 1 ", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData[0].id).to.eql(1);
});
]

PUT /api/v1/Authors/{id}
[
	{{
		pm.test("check updated value at firstName field", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData.firstName).to.eql("update");
});

pm.test("Status code is 200 and Author's data is updated successfully", function () {
    pm.response.to.have.status(200);
});
]